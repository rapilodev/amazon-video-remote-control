#!/usr/bin/perl
use warnings;
use strict;
use utf8;
$| = 1;
{

    package MovieRemoteControlServer;

    use HTTP::Server::Simple::CGI;
    use base qw(HTTP::Server::Simple::CGI);

    sub handle_request {
        my $self = shift;
        my $cgi  = shift;

        print "HTTP/1.0 200 OK\r\n";
        return unless ref $cgi;
        my $url = $cgi->url( -path_info => 1, -relative => 1 );

        return manifest()                               if $url eq '/manifest.json';
        return favicon()                                if $url eq '/favicon.svg';
        return css()                                    if $url eq '/style.css';
        return javascript()                             if $url eq '/script.js';
        return send_key( scalar( $cgi->param('key') ) ) if $cgi->param('key');
        return main_page();
    }

    sub content_type {
        return qq{Content-type:} . shift . qq{\n\n};
    }

    sub respond {
        my ( $type, $content ) = @_;
        $content =~ s/\n\s+/\n/g;
        print content_type($type) . $content;
        return 1;
    }

    sub send_key {
        my $key = shift;

        return unless $key;
        return unless $key =~ /^(LEFT|RIGHT|UP|DOWN|SPACE)$/;
        my $device = ( glob("/dev/input/by-path/*event-kbd") )[0];
        die "no keyboard found at /dev/input/by-path" unless $device;
        system qq{evemu-event $device --type EV_KEY --code KEY_$key --value 1 --sync};
        system qq{evemu-event $device --type EV_KEY --code KEY_$key --value 0 --sync} or die $!;
        respond 'application/json', qq!{"key":"$key"}!;
    }

    sub manifest {
        respond 'application/json', q!{
      "name": "Movie Remote Control",
      "short_name": "Movie Remote Control",
      "theme_color": "#fff",
      "background_color": "#000000",
      "display": "fullscreen",
      "scope": "/",
      "start_url": "/",
      "icons": [{
            "src": "/favicon.svg",
            "purpose": "maskable any",
            "sizes": "any"
      }]
    }
    !;
    }

    sub favicon {

        # source https://developers.google.com/fonts/docs/material_icons, Apache License 2.0
        respond 'image/svg+xml', q!
    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000"><path d="M0 0h24v24H0z" fill="none"/><path d="M15 9H9c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V10c0-.55-.45-1-1-1zm-3 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM7.05 6.05l1.41 1.41C9.37 6.56 10.62 6 12 6s2.63.56 3.54 1.46l1.41-1.41C15.68 4.78 13.93 4 12 4s-3.68.78-4.95 2.05zM12 0C8.96 0 6.21 1.23 4.22 3.22l1.41 1.41C7.26 3.01 9.51 2 12 2s4.74 1.01 6.36 2.64l1.41-1.41C17.79 1.23 15.04 0 12 0z"/></svg>
    !;
    }

    sub javascript {
        respond 'text/javascript', q!
    function init(){
        document.body.requestFullscreen();
    }
    function call(key){
        fetch('/?key='+key);
        window.navigator.vibrate(50);
    }
    document.addEventListener('keyup', function (e) {
        if ((e.key=='ArrowLeft')  || (e.key=='MediaRewind'))      call ('BACK');
        if ((e.key=='ArrowRight') || (e.key=='MediaFastForward')) call ('FORWARD');
        if ((e.key=='ArrowUp')    || (e.key=='AudioVolumeUp'))    call ('VOLUMEUP');
        if ((e.key=='ArrowDown')  || (e.key=='AudioVolumeDown'))  call ('VOLUMEDOWN');
        if ((e.key==' ')          || (e.key=='MediaPlayPause'))   call ('PLAYPAUSE');
    });
    window.addEventListener('DOMContentLoaded', init, false);
    !;
    }

    sub css {
        respond 'text/css', q!
    *{
        border:0;
        padding:0;
    }
    .centered {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    body{
        background:#111;
    }
    table{
        width:100vmin;
        height:100vmin;
    }
    td{
        width:25vmin;
        height:25vmin;
        text-align:center;
    }
    button:hover,button:focus{
        border: solid 0.5vmin solid #333;
        box-shadow:1vmin 1vmin 0.5vmin black, -1vmin 1vmin 0.5vmin black,inset 0 1vmin 1vmin #666;
        outline: none;
    }
    button{
        transition: all 0.5s;
        margin:2vmin;
        width:30vmin;
        height:30vmin;
        font-size:5vmin;
        cursor:pointer;
        background:#ccc;
        color:black;
        border-radius:30vmin;
        border: solid 1vmin #333;
        box-shadow:1vmin 1vmin 1vmin black, -1vmin 1vmin 1vmin black;
    }
    !;
    }

    sub main_page {
        respond 'text/html;charset:utf-8;', q%
    <!DOCTYPE html>
    <html>
        <head>
            <title>Movie Remote Control</title>
            <meta charset="utf8">
            <meta name="viewport" content="initial-scale=1, maximum-scale=1">
            <meta name="mobile-web-app-capable" content="yes">
            <meta name="apple-mobile-web-app-capable" content="yes">
            <link rel="manifest" href="manifest.json">
            <link rel="icon" href="favicon.svg" sizes="any" type="image/svg+xml">
            <link rel="stylesheet" href="style.css">
            <script src="script.js"></script>
        </head>
        <body>
            <div class="centered">
                <table>
                <tr>
                    <td></td>
                    <td><button onclick="call('UP')">Vol. +</button></td>
                    <td></td>
                </tr>
                <tr>
                    <td><button onclick="call('LEFT')">&lt;&lt;</button></td>
                    <td><button onclick="call('SPACE')">&#x25b6; / ||</button></td>
                    <td><button onclick="call('RIGHT')">&gt;&gt;</button></td>
                </tr>
                <tr>
                    <td></td>
                    <td><button onclick="call('DOWN')">Vol. -</button></td>
                    <td></td>
                </tr>
                </table>
            </div>
        </body>
    </html>
    %;
    }

}    # end of package

MovieRemoteControlServer->new(8080)->run();
